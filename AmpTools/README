//******************************************************************************
//
// See individual source files for license information.
// 
// This software is written by Matthew Shepherd, Ryan Mitchell, and 
//                  Hrayr Matevosyan at Indiana University, Bloomington and
//                  Lawrence Gibbons at Cornell University
//
//******************************************************************************

INSTALLATION AND USE:

This depends on ROOT.  Be sure that your ROOT environment is configured
properly.  The executable root-config should be in your path as this
will be used by the make system.

It is advisable to have AMPTOOLS_HOME set to the directory above this,
which should be the root of the GitHub distribution of AmpTools.  Then
check and tune the file:

AMPTOOLS_HOME/Makefile.settings

This file gets used in building all the components of AmpTools.

Typing 'make' in this directory will build a single static library,
libAmpTools.a, that can be linked by external packages.  To access the include 
files, it is recommended one add the path to this top level directory in the
-I flag to gcc.  Once this is done, files can be included in code by typing, 
for example, '#include "IUAmpTools/AmplitudeManager.h"'.

Support for computing amplitudes on graphics cards can be enabled by
typing 'make GPU=1'.  If the build is initiated from AMPTOOLS_HOME then
GPU=1 is set for gpu targets -- type 'make gpu' from AMPTOOLS_HOME.
For GPU enbaled builds, the CUDA_INSTALL_PATH should point to your
installation of CUDA and you may need to adjust the CUDA_FLAGS variable in 
the Makefile for your particular hardware.

MPI support can be enabled when building from this directory by passing
MPI=1 in as an argument to the make command.  (This happens automatically
if the build is initiated from the parent directory and the mpi target
is built.)  The resulting library will be libAmpTools_MPI.a or
libAmpTools_GPU_MPI.a if GPU acceleration is also enabled.

KNOWN ISSUES/FUTURE DEVELOPMENT:

(1) Error propagation in some cases is unreliable.  Fit parameters and
covariance matrices are correct, but computation of fit fractions that 
are printed in some examples do not properly account for numerator/denominator
correlations.  If reliable errors are needed, e.g., in the final stages
of preparing a result for publication, the boostrap procedure is advised.
It is also recommended to check the validity of errors by studying distribution
of fit results using ensembles of toy data.

(2) While it is possible to fit for a parameter that is embedded inside of
the calculation of the amplitude, there is no easy way to compute the
derivative of the intensity with respect to that parameter since the parameter
may appear in any arbitrary form.  This means that propagation of the
statistical error on the floating parameter to the uncertainty in the 
intensity is currently not possible.  The code will warn of this if such
a case arises.  In general this is similar to comment (1) above and
the same solution, bootstrap, provides a robust result if needed.
NOTE: if the free parameter is only a scale parameter
*that is set by the "scale" command in the config file* then the error
propagation will be handled correctly in the computation of the intensity.

(3) Support for moment/pdf fits: a future version will include the capability
to fit data to a sum of moments.  Currently the only supported scheme
is fitting to multiple coherent sums of amplitudes.  It is possible to obtain
some equivalent behavior of by fitting using a single sum and single amplitude
with parameters of interest emedded in the amplitude.  The amplitude returns
the square root of the intensity computed from the parameters and the kinematics.

RELEASE NOTES:

v0.15.1 (15-Sep-2023):

This version fixes a bug in the splash screen logic.  It also provides
the user an option to trigger recalculation of user data by invalidating
the calculations that are stored in the AmpVecs cache.  This is necessary
in the case that one wants to scan parameters and user data depends on
the value of some fixed parameter.  Finally, there is an option to turn
off the warning about intensity errors in FitResults.

v0.15.0 (16-Aug-2023):

This new version now supports the ability for users to write a customized
contribution to the calculation of -2 ln( L ).  (Thanks to Nils Huesken
for developing this capability.)  Users can create a class that inherits
from Neg2LnLikContrib in much the same way that user Amplitude classes
are created.  This contribution is then initalized with a neg2LnLik
keyword in the config file and parameters can be included.  This may be
useful to use external data, e.g., published data with errors, to
provide additional constraints on parameters in the context of the
main unbinned likelihood fit.  An example is included with the Constraint
class in the Dalitz tutorial.

Additionally, a script is now provided in the ROOT directory that will
load a subset of AmpTools modules into ROOT.  Of particular use are the
FitResults and ConfigurationInfo objects.

Finally, the only other significant functional change is that when
parameters are reinitialized or randomized (using the AmpToolsInterface)
an underlying call to MNRSET in Minuit is made.  This forces MINUIT to
redetermine step sizes in minimization.  This may lead to better outcomes
when repeated fits are performed with randomized parameters.

v0.14.5 (18-Nov-2022):

This release has some small corrections to the Dalitz tutorial to make it
more consistent with documentation.  A new reporting class for formatting
screen output is introduced.  This makes running large-scale MPI jobs posssible
as much of the output on follower nodes is suppressed.  Finally use of auto
pointers is removed in some places to help with backwards compatibility for
older compilers.  There are no functional changes to core fitting methods.

v0.14.4 (19-May-2022):

This is another bug fix that corrects scaling of MC histograms in the
PlotGenerator, which was affected by rescaling of the likelihood that was
introduced in v0.14

v0.14.3 (18-May-2022):

This release contains a bug fix that leads to bogus results when computing
the intensity using the FitResults class.  Fits may appear to work fine, but
due to a read of unitialized memory in the normalization integral matrix
one can obtain unphysical and nan results for intensity computations.

v0.14.2 (13-May-2022):

This re-enables new likelihood scaling.  Consistent likelihood results
now are report for MPI and non-MPI jobs.  No other functionality
changes have been made.

v0.14.1 (10-May-2022):

This release turns off by deafult the new likelihood scaling.  That is,
in the context of the notes below, it sets LEGACY_LN_LIK=1 by default.
The scaling is functional, but as implemented results in different
values for the likelihood at minimum for MPI vs. non-MPI jobs due to
how the scale factors are computed.  While the fit results are fine,
this variation is bothersome for production use and needs to be fixed
prior to making this the default.

v0.14.0 (9-May-2022):

This release includes a number of underlying performance improvements that
should largely be invisible to the user.  One key user visible change is that
the calculation of -2 ln L has been adjusted by a constant offset of -2 ln N,
where N is the number of observed signal events.  This has been done to keep
the terms in the likelihood calculation of similar scale in hopes of reducing
problems with numerical precision for large numbers of events.  (This scaling
can be disabled by passing LEGACY_LN_LIK=1 as an argument to make.)  Also,
the convergence criteria for MINUIT can be adjusted through the setTolerance
method of the MinuitMinimizationManager.

The user can now more easily switched between single and double precision
floating point to store event-level amplitudes and kinematics.  Specifically,
by default GDouble is a double type, but passing FP32=1 as an argument to
make will define GDouble as float.  This reduces RAM consumption for large
fits and can provide significant speed gains on GPUs, particularly those
with NVIDIA compute capablity 7.5.  (User code may need some adjustment it
is written in a way such that it is assumed GDouble is always double.)

In some cases it is useful to use the same MC set in multiple reactions,
this version will recognize the set has been reused and share it in memory
rather than duplicating it.

Profiling with Score-P is now supported.  There are a few other improvements
to enhance speed, particularly for GPU accelerated fits.

v0.13.1 (17-Feb-2022):

This release includes a few bug fixes.  The dependency checking in the Makefile
that builds the Dalitz tutorial was incorrect.  The testgpu script in the
Dalitz tutorial did not function properly.  And there are a few data type
changes needed to avoid compiler errors when trying to compile in single
precision.

v0.13.0 (11-Feb-2022):

This includes an overhaul of the Makefile system.  All functionality remains
very similar, but now the entire tree can be built from make from the top
and the make system will keep MPI and GPU code separated.  There are some
changes to the directory structure in the Dalitz tutorial.

This version includes support for OpenMPI-4 which removed some deprecated
function calls that were still being used in the MPI code.  These calls have
been updated and should not cause any compatibility issues -- they were
deprecated in MPI v2.

A bug was fixed that resulted in incorrect four-vectors to be read from
memory when using the AmpToolsInterface to get the Kinematics object for
a single event.  This is not typically done in fitting (where GPU
acceleration is often used) so many users may not have noticed this
bug.

v0.12.2 (20-Sep-2021):

Occasionally MIGRAD will fail with an error that says "machine
precision limits further improvement."  This condition can be fixed
by eliminating the manual setting of machine precision in the
AmpToolsInterface and allowing MINUIT to automatically determine the
machine precision.  (This is a remnant of single precision GPU
computation.)  The user can always override this by calling the
setPrecision funcion in the MinimizaitonManager -- this will no
longer be done by default in the AmpToolsInterface.  Also this release
has some very small adjustments to axes labels in plots.

v0.12.1 (8-Jul-2021):

This version fixes a bug in the normalization of accepted Monte Carlo when
trying to make projections of a fit in order to compare the data with
fit results.  The scale of the accepted MC can appear systematically
off such that its integral is not consistent with the data.  This is
usually incorrect and this bug fix should remedy the problem.

v0.12.0 (28-Jun-2021):

This version has a new feature that allows one to successively randomize
the starting parameters and refit data.  Such changes required modifications
to the general approach for MPI-based fits, and existing MPI applications are
not likely to work without some modification.  See the DalitzExeMPI/fitAmplitudes
example for how to properly terminate MPI fitting jobs.

When making projections of the fit results in the PlotGenerator the code now
normalizes fit-weighted MC by a factor determined from the fit parameters rather
than the integral of the histogram.  This allows for plotting weighted histograms,
e.g., moments of the data, where the weighted bin contents may have varying
signs.

v0.11.0 (19-Jan-2021):

This update changes the treatement of weigths in a background file provided
to the likelihood fit.  This allows mixed sign weights to be used but behavior
may be different in this version than previous versions.  Extensive notices
are printed to the screen -- also see included documenation in PDF file.

Numerous issues concerning plotting of multiple reactions are resolved.  In
this version the user PlotGenerator class can be sensitive to reaction
name when projecting kinematics.

Updates are made to the configuration file parser to allow loops, have
more consistent initializaiton of parameters (useful for generating
MC from amplitudes that contain parameters or constraints) and new
commands are introduced for future development of pdf-based fitting.

The Makefile system has ben revised to reduce the verbosity of information
that gets printed to the screen during builds.  The option VERBOSE=1 can
be specifed to recover verbose output.

v0.10.0 (10-Jun-2019):

This update includes the ability for users calculate and cache variables
from which the amplitude can later be calculated.  In the case that amplitudes
need to be recalculated in a fit (because they have free parameters) this
can be used to speed up subsequent recalculations.   Memory consumption can
be reduces because if all amplitudes can be derived from user-calcuated
data then the four-vectors can be purged from memory.  See examples in
the BreitWigner amplitude in the Dalitz tutorial for how to implement
these functions.

v0.9.4 (13-Jun-2018):

This release includes modifications to make the Histogram classes
that are used for plotting properly handle weighted events.

v0.9.3 (31-Oct-2017):

New release to include features in the AmpPlotter and supporting
packages that allow users to display background on plots.

v0.9.2 (25-Aug-2016):

Fix bug in loading kinematic data for GPU accelerated fits.

Use root-config more in Makefiles to easy transition to ROOT v.6.

Correct a bug that results in double-weighting of events in PlotGenerator.

Insert optimization to be sure parameter has changed before recalculating
amplitudes with free parameters.  This may accelerate some fits with
floating parameters in amplitudes.

v0.9.1 (11-Aug-2015):

Fix problem with AmpPlotter Makefile.  No other functional changes.

v0.9.0 (10-Aug-2015):

Add new method of accounting for background in samples.  A background
sample is specified in the configuration file using the "bkgnd" keyword.
This sample should be normalized such that the sum of the weights is
equal to the estimated size of the background.  This contribution will
be subtracted during the fit.

v0.8.0 (17-Jun-2015):

Removed dependence on CLHEP.  Lorentz vector classes are provided by ROOT
anyway.  This makes installation and compilation slightly easier since it
reduces the number of environment variables that need to be defined.
Functionally the code remains the same.  However, this change lacks
backwards compatibility since the return types of Kinematics class methods
are different.  Therefore, this update gets a new minor revision.

Modifications made to remove numerous compiler warnings when build the
UpRootMinuit library.

v0.7.0 (8-May-2015):

Added support for 2D histograms in the PlotGenerator.  This required a couple
of changes to the interface that were not backwards compatible.  See the
DalitzPlotGenerator class in the Dalitz tutorial for examples.

Enhanced precision of normalization integral files.

Numerous modifications to MPI and GPU acceleration to enhance performance.
MPI scaling is dramatically improved for applications requiring large
numbers of CPUs.  More portions of the likelihood calculation, particularly
for fits with floating paramters, are performed on the GPU in GPU-accelerated
fits.

Created a placeholder for moment-based fitting.  For now the class is empty
but the former AmplitudeManager has been been reorganized to easily allow
future implementation of a fits that utlize moments instead of amplitudes.

v0.6.2 (18-Jul-2013):

Fixed bug that caused an incorrect covariance matrix after rotateResults
was called in the FitResults object.

v0.6.1 (11-Jul-2013):

An operator+= was defined for NormIntInterface that allows one to add
statistically independent normalization integrals together to enhance the
statistical precision of integrals.

Implement a rotateResults function in FitResults that allows the user to
consistently remove a four-fold ambiguity that that is always present
when fitting for complex amplitudes.  See documentation in FitResults.

Numerous bugs were fixed that caused trouble when one or more of the production
amplitudes in a fit were fixed.

v0.6.0 (28-Jun-2013):

A bug was fixed that resulted in improper consideration of correlations
of errors between real and imaginary parts of the production amplitude
when computing the intensity.  Error calculations using code prior to
v0.6 may be incorrect.

This release greatly enhances the functionality of the FitResults class.
Several key functions for computing intensity that were performed in the
PlotGenerator are now handled by the FitResults class.

A feature was added to the FitResults class that allows one to generate
the parameter initialization portion of the configuration file so that
a subsequent fit can be easily seeded with the results of an existing
fit.

The PlotGenerator classes are now constructed from the the FitResults
object.  This will require changing any user-written PlotGenerator classes.
(See tutorials for an example.)

The AmpToolsInterface now takes an optional argument that allows the user
to tailor the intended function of the interface.  By default this
is set to fully-functioning, for fitting.  When plotting results or
generating MC, reduced or different functionality is desireable.

Numerous other small changes to either fix bugs or reduce the quantity
of output/diagnostic text that is printed to the screen during
normal operations. 

v0.5.2 (31-Jan-2013):

Fixed bug that caused segfault when normalization integrals are read in
from a file.

v0.5.1 (31-Jan-2013):

Fix bug in ParameterManager and ParamaterManagerMPI that caused MPI 
versions of the code to segfault.

The AmpToolsInterface now uses the AmpVecs structure in the printAmplitudes
routine.  This allows one to test GPU computations of amplitudes.

v0.5 (16-Nov-2012):

Bundled both Tutorials and AmpPlotter (GUI) with the package. See
README files in those directories.

Created a new FitResults object to store the results of a fit.  It can
be written to and read from a text file.  This should provide a nice user
interface to all information about the fit.  Some features are still
under development (see note 2 at the top of the file).

Fixed UpRootMinuit module to obey the setMaxIterations command through
the MinuitMinimizationManager.  The default max iterations has been
set to 5000.  It was previously unset.

Fixed bug in MinuitParameterManager that causes the error matrix to
be incorrectly "dimensioned" in the case that one of the amplitude
parameters is fixed.

Add new "scale" command to the config file and AmplitudeManager that
allows rescaling an amplitude by a constant or a fit parameter.

Add option to the AmplitudeManager to renormalize the amplitudes.  This
scales each amplitude such that the absolute square of the production
parameter (output of MINUIT) is equal to the number of events associated
with this amplitude.  This provides a more "natural" scale for the fit
parameters, but it should be used with caution with the constrain command
as it will will constrain two amplitudes to have the same number of events
modulo the set "scale" factor. (CODED BUT DISABLED: see note 3 above.)

Defined new AmpToolsInterface class to create and manage all of the supporting
objects needed for a fit.  This greatly improves the user experience.
(See documentation or tutorials.)

Created templates UserDataReader and UserAmplitude for user defined classes in
order to reduce the amount of code that user has to write.  
(See documentation or tutorials.)

Fixed MinuitIterface and URMinuit to properly use the maximum number of iterations
set by the user (default of 5000) for certain MINUIT commands (hesse, minos, migrad).

v0.4 (11-July-2012):

Fixed GPU manager to correctly report the number of cores on various new
GPU hardware (with a fix from R.T. Jones).

Corrected a factor of 2 and sign mistake in the calculation of errors
on the intensity in the PlotGenerator.

Fixed a bug in the PlotGenerator that didn't allow enabling and disabling
of amplitudes.

v0.3 (16-January-2011):

Improved reduction kernel for doing double-precision sums on the GPU.  This
was causing double precision computation to fail on newer Tesla GPUs.  No trouble
is seen now.  Doing sums on GPU seems to show minimal speed improvements.  
Further optimization is likely needed.  This version also implements callbacks
to amplitudes when parameters change in MPI-based fits.  In addition, a new
init() method is provided in the Amplitude class that users can override.  The
init() method allows the user to make expensive initial computations *after*
the initial values of the parameters have been set.  Doing these computations
in the constructor for amplitudes with free parameters is not recommended since
the free parameters will be set to some default value of 1E9.

v0.2 (4-January-2011):

Fixed bad memory handling bug that would cause corrupt amplitude calculation
for a fit that had an amplitude with free parameters.  Users should be 
skeptical of fits done with free amplitude parameters with version 0.1.

v0.1 (2-January-2011):

First publicly available experimental version.  The package has been in
private testing for a long period of time.  Some aspects of the MPI implementation
still need refinement.  Callbacks to the amplitudes on a change of parameters
have not been enabled by the ParameterManagerMPI.  In addition, the MPI+GPU
features have not been tested.  For example, the code needs to learn how to
select the correct GPU on a multi-GPU fit.

